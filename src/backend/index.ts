import { app, BrowserWindow, ipcMain, IpcMainEvent, nativeImage, session } from 'electron';
import { askOllama, getAllLocalModels, loadOllama } from './services/ollama';
import { IpcChannel, IpcMainChannel, OllamaChannel } from '../events';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const setContentSecurityPolicies = () => {
  debugger;
  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': ['connect-src \'https://metamask-sdk-socket.metafi.codefi.network/*\'']
      }
    })
  });
}

const createWindow = async (): Promise<void> => {
  mainWindow = new BrowserWindow({
    height: 800,
    width: 1200,
    autoHideMenuBar: true,
    frame: false,
    resizable: false,
    fullscreenable: false,
    show: true,
    movable: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

app.on('ready', async () => {
  await createWindow();

  ipcMain.on(IpcMainChannel.CommandOuput, (_, output: string) => {
    console.log(output);
  });

  ipcMain.handle(IpcChannel.AppInit, async (_) => {
    const ollamaInit = await loadOllama();

    return ollamaInit;
  });

  ipcMain.handle(OllamaChannel.OllamaGetAllModels, async (_) => {
    const allModels = await getAllLocalModels();

    return allModels;
  });

  ipcMain.on(OllamaChannel.OllamaStatusUpdate, (_, status) => {
    mainWindow.webContents.send(OllamaChannel.OllamaStatusUpdate, status);
  });

  ipcMain.on(OllamaChannel.OllamaQuestion, async (_, { model, query }: OllamaQuestion) => {
    console.log(`[Ollama] question asked: ${query}`);

    const response = await askOllama(model, query);
    mainWindow.webContents.send(OllamaChannel.OllamaAnswer, response);
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

export const isDev = () => {
  return !app.isPackaged;
}

export type OllamaQuestion = {
  model: string,
  query: string
}